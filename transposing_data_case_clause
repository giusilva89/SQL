-- Tranposing rows into columns
SELECT department, COUNT(*)
FROM employees
WHERE department IN ('Sports', 'Tools', 'Clothing', 'Computers')
GROUP BY department;

-- Pivot Sports, Tools, Clothing and Computer rows into columns
SELECT
SUM(CASE WHEN department = 'Sports' THEN 1 ELSE 0 END) as sports_employees,
SUM(CASE WHEN department = 'Tools' THEN 1 ELSE 0 END) as sports_employees,
SUM(CASE WHEN department = 'Clothing' THEN 1 ELSE 0 END) as sports_employees,
SUM(CASE WHEN department = 'Computers' THEN 1 ELSE 0 END) as sports_employees
FROM employees;

-- Transposing w/ subqueries
SELECT first_name,
CASE WHEN region_id = 1 THEN (SELECT country FROM regions WHERE region_id = 1) END as region_1,
CASE WHEN region_id = 2 THEN (SELECT country FROM regions WHERE region_id = 2) END as region_2,
CASE WHEN region_id = 3 THEN (SELECT country FROM regions WHERE region_id = 3) END as region_3,
CASE WHEN region_id = 4 THEN (SELECT country FROM regions WHERE region_id = 4)  END as region_4,
CASE WHEN region_id = 5 THEN (SELECT country FROM regions WHERE region_id = 5)  END as region_5,
CASE WHEN region_id = 6 THEN (SELECT country FROM regions WHERE region_id = 6)  END as region_6,
CASE WHEN region_id = 7 THEN (SELECT country FROM regions WHERE region_id = 7)  END as region_7
FROM employees;

-- 

SELECT 
COUNT(a.region_1) + COUNT(a.region_2) + COUNT(a.region_3) as united_states,
COUNT(a.region_4) + COUNT(a.region_5) + COUNT(a.region_6) as asia,
COUNT(a.region_6) + COUNT(a.region_7) as canada

FROM(
SELECT first_name,
CASE WHEN region_id = 1 THEN (SELECT country FROM regions WHERE region_id = 1) END as region_1,
CASE WHEN region_id = 2 THEN (SELECT country FROM regions WHERE region_id = 2) END as region_2,
CASE WHEN region_id = 3 THEN (SELECT country FROM regions WHERE region_id = 3) END as region_3,
CASE WHEN region_id = 4 THEN (SELECT country FROM regions WHERE region_id = 4)  END as region_4,
CASE WHEN region_id = 5 THEN (SELECT country FROM regions WHERE region_id = 5)  END as region_5,
CASE WHEN region_id = 6 THEN (SELECT country FROM regions WHERE region_id = 6)  END as region_6,
CASE WHEN region_id = 7 THEN (SELECT country FROM regions WHERE region_id = 7)  END as region_7
FROM employees) a;


SELECT 
    SUM(CASE WHEN region LIKE '%United States%' THEN 1 ELSE 0 END) AS united_states,
    SUM(CASE WHEN region LIKE '%Canada%' THEN 1 ELSE 0 END) AS canada,
    SUM(CASE WHEN region LIKE '%Asia%' THEN 1 ELSE 0 END) AS asia
FROM (
    SELECT 
        CONCAT_WS(',',
            CASE WHEN region_id = 1 THEN (SELECT country FROM regions WHERE region_id = 1) END,
            CASE WHEN region_id = 2 THEN (SELECT country FROM regions WHERE region_id = 2) END,
            CASE WHEN region_id = 3 THEN (SELECT country FROM regions WHERE region_id = 3) END,
            CASE WHEN region_id = 4 THEN (SELECT country FROM regions WHERE region_id = 4) END,
            CASE WHEN region_id = 5 THEN (SELECT country FROM regions WHERE region_id = 5) END,
            CASE WHEN region_id = 6 THEN (SELECT country FROM regions WHERE region_id = 6) END,
            CASE WHEN region_id = 7 THEN (SELECT country FROM regions WHERE region_id = 7) END
        ) AS region
    FROM employees
) as a


-- Write a query that displays 3 columns. The query should display the fruit and it's total supply along with a category of either LOW, ENOUGH or FULL. Low category means that the total supply of the fruit is less than 20,000. The enough category means that the total supply is between 20,000 and 50,000. If the total supply is greater than 50,000 then that fruit falls in the full category.
SELECT name, total_supply,
CASE WHEN total_supply < 20000 THEN 'LOW'
     WHEN total_supply >= 20000 AND total_supply <= 50000 THEN 'ENOUGH'
     WHEN total_supply > 50000 THEN 'FULL'
END as category
FROM (
SELECT name, sum(supply) total_supply
FROM fruit_imports
GROUP BY name
    ) a

-- Taking into consideration the supply column and the cost_per_unit column, you should be able to tabulate the total cost to import fruits by each season. The result will look something like this:
-- "Winter" "10072.50"
-- "Summer" "19623.00"
-- "All Year" "22688.00"
-- "Spring" "29930.00"
-- "Fall" "29035.00"
-- Write a query that would transpose this data so that the seasons become columns and the total cost for each season fills the first row?
SELECT
SUM(CASE WHEN season = 'Winter' THEN total_cost END) as winter,
SUM(CASE WHEN season = 'Summer' THEN total_cost END) as summer,
SUM(CASE WHEN season = 'All Year' THEN total_cost END) as all_year,
SUM(CASE WHEN season = 'Spring' THEN total_cost END) as spring,
SUM(CASE WHEN season = 'Fall' THEN total_cost END) as fall
FROM(
SELECT 
season,
SUM(supply * cost_per_unit) as total_cost 
FROM fruit_imports
GROUP BY season) a
;


